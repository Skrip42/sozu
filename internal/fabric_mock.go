// Code generated by MockGen. DO NOT EDIT.
// Source: fabric.go
//
// Generated by this command:
//
//	mockgen -typed -destination=fabric_mock.go -source=fabric.go -package=internal
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFabric is a mock of Fabric interface.
type MockFabric[V any] struct {
	ctrl     *gomock.Controller
	recorder *MockFabricMockRecorder[V]
}

// MockFabricMockRecorder is the mock recorder for MockFabric.
type MockFabricMockRecorder[V any] struct {
	mock *MockFabric[V]
}

// NewMockFabric creates a new mock instance.
func NewMockFabric[V any](ctrl *gomock.Controller) *MockFabric[V] {
	mock := &MockFabric[V]{ctrl: ctrl}
	mock.recorder = &MockFabricMockRecorder[V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFabric[V]) EXPECT() *MockFabricMockRecorder[V] {
	return m.recorder
}

// Create mocks base method.
func (m *MockFabric[V]) Create(ctx context.Context, inputCh chan V, flushCh chan func(), beforeSend, afterSend func(V, func()), beforeFlush func(), afterFlush func(int), capacity int) <-chan []V {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, inputCh, flushCh, beforeSend, afterSend, beforeFlush, afterFlush, capacity)
	ret0, _ := ret[0].(<-chan []V)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFabricMockRecorder[V]) Create(ctx, inputCh, flushCh, beforeSend, afterSend, beforeFlush, afterFlush, capacity any) *MockFabricCreateCall[V] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFabric[V])(nil).Create), ctx, inputCh, flushCh, beforeSend, afterSend, beforeFlush, afterFlush, capacity)
	return &MockFabricCreateCall[V]{Call: call}
}

// MockFabricCreateCall wrap *gomock.Call
type MockFabricCreateCall[V any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFabricCreateCall[V]) Return(arg0 <-chan []V) *MockFabricCreateCall[V] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFabricCreateCall[V]) Do(f func(context.Context, chan V, chan func(), func(V, func()), func(V, func()), func(), func(int), int) <-chan []V) *MockFabricCreateCall[V] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFabricCreateCall[V]) DoAndReturn(f func(context.Context, chan V, chan func(), func(V, func()), func(V, func()), func(), func(int), int) <-chan []V) *MockFabricCreateCall[V] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
